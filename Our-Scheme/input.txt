當測試「Test data 1 of 3」時，Input為>>1
; =============== Problem 8 可見數據 ====================
ab
(define a "=============== Problem 8 viewable case =================")
a

(clean-environment)

a
(cons (clean-environment) a)

; when the being evaluated S-expr is an atom, the result is that atom
; (in our standard print-form)

+3 -.12548 "Hi\n\"

; when a function is being evaluated, the parameters of this function
; are evaluated BEFORE this function is "applied" 
; to the evaluated results (of the parameters)

; 1. A list (or rather, a dotted pair) is CONSTRUCTED.

(cons 3 4)     ; an operation on two objects
(cons 3
        nil
  )            ; '(3 . nil)' = '(3)'
(cons 30
        ()
  )            ; same thing
(cons 30
        #f
  )            ; same thing
()
(cons () nil)(cons #f #f)(cons 'nil '())
(CONS 3 4)      ; Scheme distinquishs between upper and lower cases
(cons hello 4)
hello
(CONS hello there)
(list 1 2 3)(list)(list nil 2 3 #f)
(list 1 2 3)(cons)(list nil 2 3 #f)
(cons 1 2 3 ; Number of arguments should always be checked before
              ; the evaluation of an S-expression ;
  )           ; Once such an error is detected, no evaluation is performed ;
(cons hello there! How are you?)
(cons (clean-environment) ())
(cons (clean-environment))

; 2. quote - a way to "by pass" the default interpretation of an S-exp

(3 4 5)
'(3 4 5)'3 . ()
(quote (3 (4 5)))
(cons 3 
        (4321 5))
(cons 3 '(4321 5))
(list 3 (4 5))
(list 3 '(4 5))
(list 3 
        '(4 5) 
        6 
        '(7 8))
        
; 3. To give a (symbolic) name to an object

; Meaning of DEFINE revisited ("令")

; Basically, DEFINE sets up a (temporary) binding between a symbol 
; and an S-expression

; DEFINE sets up the binding between a name and an internal data structure

abc
(define a 5)   ; "令a為5"; 讓我們把"那個東西"又稱為'a'
(define b (define a 5))  ; 'define' must appear at the toplevel
(define 5 10)            ; first argument of 'define' must be a symbol
(define cons 5          ; first argument of 'define' cannot be the name 
)                       ; of a primitive
(define define 5)
(define)
(define a)
(define a b c)
(cons (define a 5) ())
(cons (define a 5))
(cons (clean-environment) (define a 5))

(define bcd (cons 3 5))
bcd             ; Is 'bcd' a name of some thing?
a             ; Is 'a' a name of some thing?
(define x '((3 4) 5))   ; 讓我們把"那個東西"又稱為'x'
x              ; Is 'x' a name of some thing?

; Combining (1), (2) and (3)

(define hello '(1 2 . 3))
hello
(cons hello 
        4
  )       
(cons hello 
        '(4)
  )       
(define hello "\"CYCU ICE\"" . nil)
(list hello (cons hello hello))
(list hello (cons hello hello) . hello)
(cons hello 
      '(400 (5000 600) 70)
)       
(define there "Number One!")
(cons hello there)
(define hello (cons '(1 2 . (3)) hello)
)
(define 'hello (cons '(1 2 . (3)) hello)
)
( list hello
       4
       'hello
)
  
; Whenever a function is called, its parameters are evaluated BEFORE
; the function is "applied" to the evaluated results of the parameters ;  
; However, this requires that (the evaluated result of) the first 
; component of the being-evaluated list must be bound to a function ;
; if (the evaluated result of) the first component of the being-evaluated list
; is not bound to a function in the first place, the evaluation process 
; stops, and an appropriate error message is issued.

(define a '(3 4))

; 4. Different parts of a list (or a dotted pair) can be 
;    individually accessed

(car '(3 4))    ; the "left part" of a dotted pair
(car '((3 4) 5)  )
(car '((3 4) 5 . 6)  )
(car '((3 4) . 5)  )
(car a)
(car (car a))
(car 345)
(car WarAndPeace!)
(car 'WarAndPeace!)
(car '(WarAndPeace!))
(cdr "(War And Peace!)")
(cdr '((3 4) 5)  )  ; the "right part" of a dotted pair
(cdr '((3 4) "Happy New Year!" . 6)  )
(cdr '((3 4) . "Merry Christmas!")  )
(cdr a)

(exit 0)

; =============== Problem 9 可見數據 ====================
ab
(define a "=============== Problem 9 viewable case =================")
a

(clean-environment)

a

; 5. Primitive predicates (A predicate is a function that returns
;      #t or nil (i.e., #f); By convention, the name of a predicate
;      should have a suffix '?')

(pair? 3)      ; Other Lisps may not have PAIR?; they have ATOM? and LIST?
(pair? '(3 4))
(pair? '(3 . 4))
(pair? "Hello, there!")
(pair? "Hello, " "How are you?")
(pair?)
(null? ())     ; is it the empty list?
(null? #f)     ; #f = nil = ()
(null? '(3 . 4))
(integer? 3)
(integer? 3.4)
(integer? -.4)
(real? +3)
(real? 3.4)
(real? .5)
(number? 3)
(number? 3.4)
(string? "Hi")
(string? +3.4)
(boolean? #t)
(boolean? ())
(boolean? #f)
(boolean? '(3 . 4))
(symbol? 'abc)
(symbol? 3)
(number? America)
(define America '(U. S. A.))
(symbol? America    ; Once the symbol America is evaluated,
  )                   ; do we get a symbol?
(pair? America)
(pair? American)
(boolean? America)
(pair? Europe 4)
(define Europe 'hi)
(pair? America Europe)

; 6. Basic arithmetic, logical and string operations

(+ 3 7 10)
(- 3 7 10)
(- 3.5 5 10)
(* 3 4)
(* 3 "Hi")
(* 3 4.5 5)
(* '(1 (2 3) 4) '(6 7 8))
(*)
(* 3)
(* 3 4 5)
(* 1 2 3 4 5)
(/ 3)
(- 3)
(+ 3)
(- 1 2 3 4 5)
(define a 5)
(/ 15 a)
(/ 7 a)
(/ 15.0 3)
(/ 15 2)
(/ 15.0 2)
(/ 15 0)
(/ 15 2.0)
(/ 45 3 5 2)
(+ 15.125 4)
(+ (* a 10) (pair? (+ a a)))
(not #t)
(not)
(not What about?)
(not 3)
(not '(1 2))
(not ())
(not nil)
(not (pair? (+ a a)))
(> 3 2 1.2)
(> 5 3 1)
(> 5 3 5 nil)
(> 3.125 2)
(>= 3.25 2)
(< 3.125 2)
(<= 3.125 2)
(<= 2 2 2 2 2 2 2 2)
(= 2 2)
(= 2 a)
(> a a)
(> a 'a)
(= 2 a a)
(>= a a a 'a)
(string-append "\"Hello," " there!\"")
(string-append "Hello," " there!" " Wait!")
(string-append "Hello,"")
(string-append "Hello,")
(string-append)
(string>? "az" "aw")
(string>? "az" "aw" "ax")
(string>? "az" "aw" "atuv")
(string>? "az")
(string>?)
(string>? 15 "hi")
(string<? "az" "aw")
(string<? "az" "aw" "ax")
(string<? "az" "aw" (+ 2 (/ 5 3)) "ax")
(string<? "az" "aw" (+ 2 (/ 5 0)) "ax")
(string<? "az" "aw" "atuv")
(string=? "az" "aw")
(string=? "az" "aw" "ax")
(string=? "az" (string-append "a" "z"))
(string=? "az" (string-append "a" "z" 3) (/ (+ 3 5) (- 12 (+ 5 7))))
(string=? "az" (string-append "a" "z" "3") (/ (+ 3 5) (- 12 (+ 5 7))))
(+ 15 (begin "hi" 5))
(+ 15 (begin 4 5 "hi"))
(string>? "hi" "there" a)
(string>? "hi" "there" about)

; 8. eqv? and equal?

; eqv? returns "true" only when the two being compared
; objects are atoms (except in the case of strings)
; or when the two being compared objects "occupy the
; same memory space".

; equal?, on the other hand, is the usual notion of 
; equality comparison

(eqv?)
(eqv? 3)
(eqv? 3 3)
(eqv? 3 3 3)
(define a '((3 (4 5))))
a
(eqv? a a)
(eqv? a '((3 (4 5))))
(equal? a '((3 (4 5))))
(define b a)
(eqv? a b)
(define c '(3 4))
(eqv? a c)
(equal? a c)
(eqv? '((3 (4 5))) '((3 (4 5))))
(eqv? "Hi" "Hi")
(equal? a a)
(equal? '((3 (4 5))) '((3 (4 5))))
(equal? '((3 (4 5))) '(3 4 5))
(equal? "Hi" "Hi")

(define c (cdr a))(eqv? c (cdr b))(define c (cons (car a) (cdr b)))
(eqv? c b)(equal? c b). 5
(+ 10 20)(  . 5 )

; =============== Problem 10 可見數據 ====================
ab
(define a "=============== Problem 10 viewable case =================")
a

(clean-environment)a

(cons (clean-environment) a)

; 9. Conditionals

(if)
(if #t)
(if #t 5)
(if #t 5 6 7)
(if (> 3 2) 'good 'bad)
(if (> 3 2) 'good)
(if (> 3 20) 'good)
(define a 5)
(if a 'good 'bad)
(if (not a) 'good 'bad)
(define a nil)
(if a '(1 2) '(3 4))
(if (not a) '((1 (2) 1) 1) '((3) (4 3)))
(if (not a) '((1 (2) 1) 1) )
(if 1 2 3)
(if (cons 1 2) 3 4)
(if nil 3 4)
(if #t 3 4)

(cond)
(cond () ; Parameter-format errors should always be checked before
           ; evaluating an S-expression ;
           ; Once such an error is detected, no evaluatio is performed ;
  )
(cond b)
(cond (#t))
(cond (#t 3) nonsense)
(cond (#f) hello)
(cond hello (#f) there)
(cond (#f) (#t 3))
(cond (#f nonsense terrible) (#t 3) (#f))

(define b 4)
(cond ((> 3 b) 'bad)
      ((> b 3) 'good)
      (else "What happened?") ; note that 'else' is a keyword in OurScheme ; 
)                             ; however, it is not a primitive
(cond ((> 3 b) 'bad)
      (else 'good)            ; this 'else' is a "normal" symbol
      ((> b 3) 'ok)
)
(define else #t)              
(cond ((> 3 b) 'bad)
      (else 'good)            
      ((> b 3) 'ok)
)
(cond ((> 3 b) 'bad)
        (else 'good)            
        ((> b 3) 'ok)
  )
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (else "What happened?") ; only when being here is 'else' a keyword
)
(cond ((> 3 b) 'bad)
      ((> b 5) 'bad)
      (#t "What happened?")   ; can also use #t to mean "in all other cases"
)
(cond (#t 3))
(cond ((> 3 4) 'bad)
      ((> 4 3) 'good)
)
(cond ((> 3 4) 'bad)
      ((> 4 5) 'bad)
)
(cond (#t 3))
(cond (#f 3) nonsense)
(cond (#f 3))
(cond (#f nonsense) (#t nonsense) nonsense )
(cond ((> 3 4) 'bad)
      ((> 4 3) 'good)
)
(cond ('(3 4) 'bad)
      ((> 4 3) 'good)
)
(cond (5 'bad)
      ((> 4 3) 'good)
)
(cond ((> y 4) 'bad)
      ((> 4 3) 'good)
)

; more 搞怪examples

(define a 10)
(define b 20)

(cond ((> a b) 3)
      (#f 4)
      (else 5)
) ; should get 5

(define else '(1 2))

else ; should get >>(1 2)<<

(cond ((> b 100) 3)
      ((not else) 4)
      (else (not else))
) ; should get nil

(cond ((> a 100) 3)
      ((not else) 4)
      (else else)
) ; should get >>(1 2)<<

(define else #f)

(cond ((> a b) 1)
      (else 2)
      (else else)
) ; should get nil


; =============== Problem 11 可見數據 ====================
ab
(define a "=============== Problem 11 viewable case =================")
a

(clean-environment)

a

(begin)
(begin 3)
(begin 3 4 5)
(begin 3 4 d)
(begin 3 4 d (exit))
(begin 3 4 (exit))

(begin 
   (car '(1 2 3))
   (cdr '(1 2 3))
)

(begin
   (list '(1 2 3))
)

(begin
   ( list '(1 2 3) (cons 2 d) )
)

(define a 5)

( and        ; 'and' either returns the evaluated result of
  (pair? 3)  ; the first one that is evaluated to nil
  a          ; or the evaluated result of the last one
)                          

( and #t a )

( or         ; 'or' either returns the evaluated result of
  a          ; the first one that is not evaluated to nil
  (null? ()) ; or the evaluated result of the last one
)

 (car (cdr '(Hi! How is it going ?)))
 (cdr (cdr '(To be or not to be ?)))
 (cdr (car '(That is the question !)))
 (car (car (cons "Hi," " Everybody!")))
 (cdr (list "Hi," " Everybody!" "Wake up!"))

(and
 (car (cdr '(Hi! How is it going ?)))
 (cdr (cdr '(To be or not to be ?)))
 (cdr (car '(That is the question !)))
 (car (car (cons "Hi," " Everybody!")))
 (cdr (list "Hi," " Everybody!" "Wake up!"))
)

(and
 (car (cdr '(Hi! How is it going ?)))
 (not (cdr (cdr '(To be or not to be ?))))
 (cdr (car '(That is the question !)))
 (car (car (cons "Hi," " Everybody!")))
 (cdr (list "Hi," " Everybody!" "Wake up!"))
)

(and
 (and (car (cdr '(Hi! How is it going ?))) 5)
 (not (not (cdr (cdr '(To be or not to be ?)))))
 (cdr (car '(That is the question !)))
 (car (car (cons "Hi," " Everybody!")))
 (cdr (list "Hi," " Everybody!" "Wake up!"))
)

; ------- functional compositions (same category) -------

(define hello "\"CYCU ICE\"")
(define there "Number One!")
(cons (car (list hello there)) there)

(define a '(30 40))
(cons 5 a)
a
(define a (cons 3 a))
(cons (cons 5 a) a)
a
(car (car (cons a a)))
(cdr (list a a (car (car (cons a a)))))
(define a (cdr (list a a (car (car (cons a a)))))
)
(car (cdr a))
(cons (car (cdr (cdr (car a))))
      (cdr a)
)
(define a
 (list (car (cdr a))
       (cons (car (cdr (cdr (car a))))
             (cdr a)
       )
       (car (cdr a))
 )
)
a
(define b a)
(define b (cons (list a b) a))
b
(cons (car b) (car (cdr b)))

; ------- functional compositions (same category) -------

(define a 5)
(define b 10)
(define c 20)
(define list1 '(11 22 33))
(define list2 '(12 23 34))
(define str1 "abc")
(define str2 (string-append "d" "de"))
(define var1
 (- ( + (- a b) (* c a 3) 
    )
    (* a (+ b c (car list1)))
    (car (cdr list2))
 )
)
(>= var1 (car (cdr (cdr list2))))
(string>? (string-append "Hello" str1)
          str2
)
(not (> a 3))
(+ (/ b (- c (* b 2))) a)
; etc.

; ------- functional compositions (different categories) -------

(cons
  (cons (+ 30 50)
        (cdr '(The sun shines bright))
  )
  (list (null? '())
        (pair? '(30 (40)))
        (- (+ 5 7) (+ 2 3))
        '(1 2 . (3))
  )
)
(if (> a b)
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)
(if (not (> a b))
    (* a
      (+ (car list1)
         (car (cdr list2)))
    )
    (* b
      (+ (car list2)
         (car (cdr list1)))
    )
)

(define d 20)
(begin
   3 4 d)
(begin
   (+ 3 5)
   (- 4 5)
   (* d d)
  )
(define a 20)
(define b 40)

(list
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )

          ( begin
            (- b (+ a a))
            (> 70 b)
          )
)
(if #t (begin 3 4 5))
(if #t (3 4 5) (6 7))
(if #f (3 4 5) (6 7))
(cond ((> 5 3) 'good 'better 'best) (#t 'OK?)   )
(define a (+ a b a))

(cond ( (> a b) (+ a b) (- a b) (* a b) ) 
      (  else 'OK? )   
)

(cond ( (> a b) 
        (+ a b) (- a b) (- a Look!) (* a b) 
      ) 
      (  #t 
         'OK? 
      )   
)    

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  #t 
         ( list 'OK? 'Correct? )
         ( cons 'OK? 'Correct? ) 
      )   
)

(exit 20)
(car (cons (exit 20) (+ 5 3)))
(car (cons (define abc 20) (+ 5 3)))
(car (cons (exit 20)))
(car (cons (+ 5 "Hi") (exit 20)))
(car (cons (+ 5 (car '(10 20))) (exit 20)))
(cons 10 20 (+ 5 "Hi"))

; =============== Problem 12 可見數據 ====================
ab
(define a "=============== Problem 12 viewable case =================")
a

(clean-environment)

; ------- Some newly added stuff -------

; In OurScheme (and Lisp too), there is no discrimination against 
; functions

cons ; the binding of this (primitive) symbol is a function
car  ; the binding of this (primitive) symbol is also a function

(define myCons cons) ; just like int/float/string can be the binding
(define myCar car)   ; of a symbol, a function can be a binding too

myCons ; what is the (current) binding of this symbol?

(myCons cons myCar) ; the evaluated result of 'myCons' is a function
(myCons 3 '(4 myCar))

((myCar (cons myCons cons)) '(10) 20)




(begin 
   (myCar '(1 2 3))
   (cdr '(1 2 3))
   (car (cdr '(1 (20 myCons))))
)

(begin
   (list (list 1 - 3 +)
         (myCons 25 car)
   )
)
((myCar (cons myCons cons)) 
 (cdr (cdr '(Hi! (How is) (it) going ?))))

(define >? string>?)
(define <? string<?)
(define =? string=?)

(define first "CYCU")
(define second "NCU")
(define third "NSYU")

(define cc 
        (if (>? first second)
            "Good"
            (if (<? first second)
                "Bad"
                "So So"
            )
        )
)
cc

(if (=? second first)
    "Really?"
    (if (>? second first)
        "OK."
        (if (<? second first)
            "Must be."
            "Impossible."
        )
    )
)

(begin 
   (car '(1 2 3))
   (CDR (cons 3 x))
   (car (cdr y))
)

(begin
   (list '(1 2 3)
         (cons 25 35)
   )
)(begin)(car (cdr (cdr '(Hi! (How is) (it) going ?))))
(cons 'Whether (cdr (cdr '(To be or not to be ?)))
)
(cdr (car (cons '(That is the question !) ()
          )
     )
)

(cdr (car (cons "Hi," " Everybody!")
     )
)
(cdr (cdr (list "Hi," " Everybody!" "Wake up!")))
(define sun-shine '(The sun shines bright))
(define money 50)

(cons (- (+ 30 money) 40)
      (cdr (cdr sun-shine))
)
(define a 20)
(define d 20)
(define b 40)
(if (> a (+ b d))
    +
    /
)
(+ d
     ( if (> a b)
          (+ a (* a b))
          (- b (+ a a))
     )
  )
(+ d
     ( if (> a b)
          (+ a (* a b))
          ( begin
            (- b (+ a a))
            70
          )
     )
  )
(if #t (begin 3 4 a) (begin 6 7))
(if (> b a) ((+ 1 2) 4 5) (6 7))
(if (< b a) ((+ 1 2) 4 5) (a 7))
(cond ( (> b a) "Good" "Better" "Best") 
        ( #t 'Never 'let 'it 'rest!)   )
(define a (+ a b a))

(cond ( (> (* a 2) (* b 2)) (+ a b) (+ (- a b) (* a b)) ) 
      ( (> a b) Look! )
      ( (< 20 10) It's a bird !)
      (  It's a plane ! ) 
      (  #t It's Superman !  )
)

(cond ( (> (* a 2) (* b 2)) (+ a b) (+ (- a b) (* Look! b)) ) 
      ( (> a b) 100 )
      ( (< 20 10) It's a bird !)
      (  It's a plane ! ) 
      (  #t It's Superman !  )
)

(cond ( (< a b) 
        (+ a b) (- a b) (- a Look!) (* a b)
      ) 
      (  #t 
         ( list
                ( list 'OK? 'Correct? )
                ( list 'OK? 'Correct? )
         ) 
      )   
)

(define opr-list 
        (list (list cons car cdr)
              (list + - * /)
              (list pair? atom?)
        )
)

((car (car opr-list)) (car (car opr-list)) 
                      (car (cdr (cdr opr-list)))
)    

( ((car (car opr-list)) (car (car opr-list)) 
                        (car (cdr (cdr opr-list)))
  )  
  (car '(30 40))
)  
    
( (car (cdr ((car (car opr-list)) (car (car opr-list)) 
                                  (car (cdr (cdr opr-list)))
            )  
       )
  )
  (car '(30 40))
)  
    
( (car (cdr ((car (car opr-list)) (car (car opr-list)) 
                                  (car (cdr (cdr opr-list)))
            )  
       )
  )
  (car '((30) 40))
)  
    
; =============== Problem 13 可見數據 ====================
ab
(define a "=============== Problem 13 viewable case =================")
a

(clean-environment)
a

(define operators (list + - * /))
( (car (cdr operators))
  ((car operators) 10 20)
  ((car (cdr (cdr operators))) 11 22)
)

(define listOfNum '(10.1254 20.318503 30.1 40.2 50 60 70 80.999 90.9)
)
(define listOfStr '("What?" "When?" "Where?" "Who?" "How?" "Why?" "How come?") 
)
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
(cons (car listOfSym)
      (cons (car (cdr listOfStr))
            (list (car (cdr (cdr listOfNum))))
      )
)
(cons (car (cdr (cdr listOfNum)))
      (cons (car (cdr listOfStr))
            (list (car listOfSym))
      )
)

(define abc
  (list
    (cons (car listOfSym)
          (cons (car (cdr listOfStr))
                (list (car (cdr (cdr listOfNum))))
          )
    ) ; cons
    (cons (car (cdr (cdr listOfNum)))
          (cons (car (cdr listOfStr))
                (list (car listOfSym))
          )
    ) ; cons
  ) ; list
) ; define
abc
(cons (car (car abc))
      (cdr abc)
)
(cons (car (car (car abc)))
      (cdr abc)
)

(define efg
  (cons (car abc)
        (car (cdr abc))
  )
)
efg
abc
(define ++ (car operators))
(define -- (car (cdr operators)))
( ++ (car listOfNum)
    (car (cdr listOfNum))
    (car (cdr (cdr listOfNum)))
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
     )
     ( if ( string>? (car listOfStr) (car (cdr listOfStr))
          )
         10
         15
     )
)
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfStr)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           10
           15
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
           (car listOfSym)
           (cdr listOfNum)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car listOfStr)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car "It's a plane!")
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (cdr (cdr listOfNum)))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
( -- ( ++ (car listOfNum)
          (car (cdr listOfNum))
          (car (car (cdr (cdr listOfNum listOfNum))))
      )
      ( if ( string>? (car listOfStr) (car (cdr listOfStr))
           )
           (car Look!)
           (car It's a plane!)
      )
   )
(define What? (car listOfNum))
(define When? (car (cdr listOfNum)))
listOfSym
( cons (list (car listOfSym)
               What?
         )
         (cdr listOfSym)
  )
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       What?
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
( cons (car listOfSym)
         ( cons (list (car (cdr listOfSym))
                      When?
                )
                (cdr (cdr listOfSym))
         )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              When?
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
(define listOfSym '(What? When? Where? Who? How? Why? HowCome?)
)
listOfSym
(define listOfSym
          ( cons (list (car listOfSym)
                       (car listOfNum)
                 )
                 (cdr listOfSym)
          )
  )
listOfSym
(define listOfSym
          ( cons (car listOfSym)
                 ( cons (list (car (cdr listOfSym))
                              (car (cdr listOfNum))
                        )
                        (cdr (cdr listOfSym))
                 )
          )
  )
listOfSym
<<

正確的輸出應該是>>Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 8 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> 3

> -0.125

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 9

> ( 3
  .
  4
)

> ( 3
)

> ( 30
)

> ( 30
)

> nil

> ( nil
)

> ( nil
)

> ( nil
)

> ERROR (unbound symbol) : CONS

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : CONS

> ( 1
  2
  3
)

> nil

> ( nil
  2
  3
  nil
)

> ( 1
  2
  3
)

> ERROR (incorrect number of arguments) : cons

> ( nil
  2
  3
  nil
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : cons

> ERROR (attempt to apply non-function) : 3

> ( 3
  4
  5
)

> 3

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 3
  ( 4
    5
  )
)

> ERROR (attempt to apply non-function) : 4321

> ( 3
  4321
  5
)

> ERROR (attempt to apply non-function) : 4

> ( 3
  ( 4
    5
  )
)

> ( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> ERROR (unbound symbol) : abc

> a defined

> ERROR (level of DEFINE)

> ERROR (DEFINE format) : ( define
  5
  10
)

> ERROR (DEFINE format) : ( define
  cons
  5
)

> ERROR (DEFINE format) : ( define
  define
  5
)

> ERROR (DEFINE format) : ( define
)

> ERROR (DEFINE format) : ( define
  a
)

> ERROR (DEFINE format) : ( define
  a
  b
  c
)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> bcd defined

> ( 3
  .
  5
)

> 5

> x defined

> ( ( 3
    4
  )
  5
)

> hello defined

> ( 1
  2
  .
  3
)

> ( ( 1
    2
    .
    3
  )
  .
  4
)

> ( ( 1
    2
    .
    3
  )
  4
)

> hello defined

> ( ""CYCU ICE""
  ( ""CYCU ICE""
    .
    ""CYCU ICE""
  )
)

> ERROR (non-list) : ( list
  hello
  ( cons
    hello
    hello
  )
  .
  hello
)

> ( ""CYCU ICE""
  400
  ( 5000
    600
  )
  70
)

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> hello defined

> ERROR (DEFINE format) : ( define
  ( quote
    hello
  )
  ( cons
    ( quote
      ( 1
        2
        3
      )
    )
    hello
  )
)

> ( ( ( 1
      2
      3
    )
    .
    ""CYCU ICE""
  )
  4
  hello
)

> a defined

> 3

> ( 3
  4
)

> ( 3
  4
)

> ( 3
  4
)

> 3

> ERROR (car with incorrect argument type) : 3

> ERROR (car with incorrect argument type) : 345

> ERROR (unbound symbol) : WarAndPeace!

> ERROR (car with incorrect argument type) : WarAndPeace!

> WarAndPeace!

> ERROR (cdr with incorrect argument type) : "(War And Peace!)"

> ( 5
)

> ( "Happy New Year!"
  .
  6
)

> "Merry Christmas!"

> ( 4
)

> ERROR (incorrect number of arguments) : exit

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 9 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> nil

> #t

> #t

> nil

> ERROR (incorrect number of arguments) : pair?

> ERROR (incorrect number of arguments) : pair?

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> #t

> #t

> nil

> #t

> nil

> ERROR (unbound symbol) : America

> America defined

> nil

> #t

> ERROR (unbound symbol) : American

> nil

> ERROR (incorrect number of arguments) : pair?

> Europe defined

> ERROR (incorrect number of arguments) : pair?

> 20

> -14

> -11.500

> 12

> ERROR (* with incorrect argument type) : "Hi"

> 67.500

> ERROR (* with incorrect argument type) : ( 1
  ( 2
    3
  )
  4
)

> ERROR (incorrect number of arguments) : *

> ERROR (incorrect number of arguments) : *

> 60

> 120

> ERROR (incorrect number of arguments) : /

> ERROR (incorrect number of arguments) : -

> ERROR (incorrect number of arguments) : +

> -13

> a defined

> 3

> 1

> 5.000

> 7

> 7.500

> ERROR (division by zero) : /

> 7.500

> 1

> 19.125

> ERROR (+ with incorrect argument type) : nil

> nil

> ERROR (incorrect number of arguments) : not

> ERROR (incorrect number of arguments) : not

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> ERROR (> with incorrect argument type) : nil

> #t

> #t

> nil

> nil

> #t

> #t

> nil

> nil

> ERROR (> with incorrect argument type) : a

> nil

> ERROR (>= with incorrect argument type) : a

> ""Hello, there!""

> "Hello, there! Wait!"

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 26

> ERROR (incorrect number of arguments) : string-append

> ERROR (incorrect number of arguments) : string-append

> #t

> nil

> #t

> ERROR (incorrect number of arguments) : string>?

> ERROR (incorrect number of arguments) : string>?

> ERROR (string>? with incorrect argument type) : 15

> nil

> nil

> ERROR (string<? with incorrect argument type) : 3

> ERROR (division by zero) : /

> nil

> nil

> nil

> #t

> ERROR (string-append with incorrect argument type) : 3

> ERROR (division by zero) : /

> 20

> ERROR (+ with incorrect argument type) : "hi"

> ERROR (string>? with incorrect argument type) : 5

> ERROR (unbound symbol) : about

> ERROR (incorrect number of arguments) : eqv?

> ERROR (incorrect number of arguments) : eqv?

> #t

> ERROR (incorrect number of arguments) : eqv?

> a defined

> ( ( 3
    ( 4
      5
    )
  )
)

> #t

> nil

> #t

> b defined

> #t

> c defined

> nil

> nil

> nil

> nil

> #t

> #t

> nil

> #t

> c defined

> #t

> c defined

> nil

> #t

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> 30

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 10 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : if

> ERROR (incorrect number of arguments) : if

> 5

> ERROR (incorrect number of arguments) : if

> good

> good

> ERROR (no return value) : ( if
  ( >
    3
    20
  )
  ( quote
    good
  )
)

> a defined

> good

> bad

> a defined

> ( 3
  4
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> 2

> 3

> 4

> 3

> ERROR (COND format) : ( cond
)

> ERROR (COND format) : ( cond
  nil
)

> ERROR (COND format) : ( cond
  b
)

> ERROR (COND format) : ( cond
  ( #t
  )
)

> ERROR (COND format) : ( cond
  ( #t
    3
  )
  nonsense
)

> ERROR (COND format) : ( cond
  ( nil
  )
  hello
)

> ERROR (COND format) : ( cond
  hello
  ( nil
  )
  there
)

> ERROR (COND format) : ( cond
  ( nil
  )
  ( #t
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
    terrible
  )
  ( #t
    3
  )
  ( nil
  )
)

> b defined

> good

> ERROR (unbound symbol) : else

> else defined

> good

> good

> "What happened?"

> "What happened?"

> 3

> good

> ERROR (no return value) : ( cond
  ( ( >
      3
      4
    )
    ( quote
      bad
    )
  )
  ( ( >
      4
      5
    )
    ( quote
      bad
    )
  )
)

> 3

> ERROR (COND format) : ( cond
  ( nil
    3
  )
  nonsense
)

> ERROR (no return value) : ( cond
  ( nil
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
  )
  ( #t
    nonsense
  )
  nonsense
)

> good

> bad

> bad

> ERROR (unbound symbol) : y

> a defined

> b defined

> 5

> else defined

> ( 1
  2
)

> nil

> ( 1
  2
)

> else defined

> nil

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 11 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (incorrect number of arguments) : begin

> 3

> 5

> ERROR (unbound symbol) : d

> ERROR (unbound symbol) : d

> ERROR (level of EXIT)

> ( 2
  3
)

> ( ( 1
    2
    3
  )
)

> ERROR (unbound symbol) : d

> a defined

> nil

> 5

> 5

> How

> ( or
  not
  to
  be
  ?
)

> ERROR (cdr with incorrect argument type) : That

> ERROR (car with incorrect argument type) : "Hi,"

> ( " Everybody!"
  "Wake up!"
)

> ERROR (cdr with incorrect argument type) : That

> nil

> ERROR (cdr with incorrect argument type) : That

> hello defined

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> a defined

> ( 5
  30
  40
)

> ( 30
  40
)

> a defined

> ( ( 5
    3
    30
    40
  )
  3
  30
  40
)

> ( 3
  30
  40
)

> 3

> ( ( 3
    30
    40
  )
  3
)

> a defined

> 3

> ( 40
  3
)

> a defined

> ( 3
  ( 40
    3
  )
  3
)

> b defined

> b defined

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  3
  ( 40
    3
  )
  3
)

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  .
  3
)

> a defined

> b defined

> c defined

> list1 defined

> list2 defined

> str1 defined

> str2 defined

> var1 defined

> #t

> nil

> nil

> ERROR (division by zero) : /

> ( ( 80
    sun
    shines
    bright
  )
  #t
  #t
  7
  ( 1
    2
    3
  )
)

> 340

> 170

> d defined

> 20

> 400

> a defined

> b defined

> ( 0
  #t
)

> 5

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 6

> best

> a defined

> 3200

> ERROR (unbound symbol) : Look!

> ( OK?
  .
  Correct?
)

> ERROR (incorrect number of arguments) : exit

> ERROR (level of EXIT)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (+ with incorrect argument type) : "Hi"

> ERROR (level of EXIT)

> ERROR (incorrect number of arguments) : cons

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 12 viewable case ================="

> environment cleaned

> #<procedure cons>

> #<procedure car>

> myCons defined

> myCar defined

> #<procedure cons>

> ( #<procedure cons>
  .
  #<procedure car>
)

> ( 3
  4
  myCar
)

> ( ( 10
  )
  .
  20
)

> ( 20
  myCons
)

> ( ( 1
    #<procedure ->
    3
    #<procedure +>
  )
  ( 25
    .
    #<procedure car>
  )
)

> ERROR (incorrect number of arguments) : cons

> >? defined

> <? defined

> =? defined

> first defined

> second defined

> third defined

> cc defined

> "Bad"

> "OK."

> ERROR (unbound symbol) : CDR

> ( ( 1
    2
    3
  )
  ( 25
    .
    35
  )
)

> ERROR (incorrect number of arguments) : begin

> ( it
)

> ( Whether
  or
  not
  to
  be
  ?
)

> ( is
  the
  question
  !
)

> ERROR (cdr with incorrect argument type) : "Hi,"

> ( "Wake up!"
)

> sun-shine defined

> money defined

> ( 40
  shines
  bright
)

> a defined

> d defined

> b defined

> #<procedure />

> 20

> 90

> 20

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 20

> "Best"

> a defined

> 3240

> ERROR (unbound symbol) : Look!

> ( ( OK?
    Correct?
  )
  ( OK?
    Correct?
  )
)

> opr-list defined

> ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> ERROR (attempt to apply non-function) : ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> nil

> #t

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 13 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> operators defined

> -212

> listOfNum defined

> listOfStr defined

> listOfSym defined

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> ERROR (car with incorrect argument type) : What?

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ++ defined

> -- defined

> 60.544

> 45.544

> ERROR (+ with incorrect argument type) : "Where?"

> ERROR (- with incorrect argument type) : What?

> ERROR (incorrect number of arguments) : if

> ERROR (no return value) : ( if
  ( string>?
    ( car
      listOfStr
    )
    ( car
      ( cdr
        listOfStr
      )
    )
  )
  ( car
    listOfStr
  )
)

> ERROR (car with incorrect argument type) : 30.100

> ERROR (car with incorrect argument type) : "It's a plane!"

> ERROR (incorrect number of arguments) : car

> ERROR (incorrect number of arguments) : cdr

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<

你的程式的輸出是>>Welcome to OurScheme!

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 8 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> 3

> -0.125

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 9

> ( 3
  .
  4
)

> ( 3
)

> ( 30
)

> ( 30
)

> nil

> ( nil
)

> ( nil
)

> ( nil
)

> ERROR (unbound symbol) : CONS

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : hello

> ERROR (unbound symbol) : CONS

> ( 1
  2
  3
)

> nil

> ( nil
  2
  3
  nil
)

> ( 1
  2
  3
)

> ERROR (incorrect number of arguments) : cons

> ( nil
  2
  3
  nil
)

> ERROR (incorrect number of arguments) : cons

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : cons

> ERROR (attempt to apply non-function) : 3

> ( 3
  4
  5
)

> 3

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 2 is >>.<<

> ( 3
  ( 4
    5
  )
)

> ERROR (attempt to apply non-function) : 4321

> ( 3
  4321
  5
)

> ERROR (attempt to apply non-function) : 4

> ( 3
  ( 4
    5
  )
)

> ( 3
  ( 4
    5
  )
  6
  ( 7
    8
  )
)

> ERROR (unbound symbol) : abc

> a defined

> ERROR (level of DEFINE)

> ERROR (DEFINE format) : ( define
  5
  10
)

> ERROR (DEFINE format) : ( define
  cons
  5
)

> ERROR (DEFINE format) : ( define
  define
  5
)

> ERROR (DEFINE format) : ( define
)

> ERROR (DEFINE format) : ( define
  a
)

> ERROR (DEFINE format) : ( define
  a
  b
  c
)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (level of CLEAN-ENVIRONMENT)

> bcd defined

> ( 3
  .
  5
)

> 5

> x defined

> ( ( 3
    4
  )
  5
)

> hello defined

> ( 1
  2
  .
  3
)

> ( ( 1
    2
    .
    3
  )
  .
  4
)

> ( ( 1
    2
    .
    3
  )
  4
)

> hello defined

> ( ""CYCU ICE""
  ( ""CYCU ICE""
    .
    ""CYCU ICE""
  )
)

> ERROR (non-list) : ( list
  hello
  ( cons
    hello
    hello
  )
  .
  hello
)

> ( ""CYCU ICE""
  400
  ( 5000
    600
  )
  70
)

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> hello defined

> ERROR (DEFINE format) : ( define
  ( quote
    hello
  )
  ( cons
    ( quote
      ( 1
        2
        3
      )
    )
    hello
  )
)

> ( ( ( 1
      2
      3
    )
    .
    ""CYCU ICE""
  )
  4
  hello
)

> a defined

> 3

> ( 3
  4
)

> ( 3
  4
)

> ( 3
  4
)

> 3

> ERROR (car with incorrect argument type) : 3

> ERROR (car with incorrect argument type) : 345

> ERROR (unbound symbol) : WarAndPeace!

> ERROR (car with incorrect argument type) : WarAndPeace!

> WarAndPeace!

> ERROR (cdr with incorrect argument type) : "(War And Peace!)"

> ( 5
)

> ( "Happy New Year!"
  .
  6
)

> "Merry Christmas!"

> ( 4
)

> ERROR (incorrect number of arguments) : exit

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 9 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> nil

> #t

> #t

> nil

> ERROR (incorrect number of arguments) : pair?

> ERROR (incorrect number of arguments) : pair?

> #t

> #t

> nil

> #t

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> #t

> nil

> #t

> #t

> #t

> nil

> #t

> nil

> ERROR (unbound symbol) : America

> America defined

> nil

> #t

> ERROR (unbound symbol) : American

> nil

> ERROR (incorrect number of arguments) : pair?

> Europe defined

> ERROR (incorrect number of arguments) : pair?

> 20

> -14

> -11.500

> 12

> ERROR (* with incorrect argument type) : "Hi"

> 67.500

> ERROR (* with incorrect argument type) : ( 1
  ( 2
    3
  )
  4
)

> ERROR (incorrect number of arguments) : *

> ERROR (incorrect number of arguments) : *

> 60

> 120

> ERROR (incorrect number of arguments) : /

> ERROR (incorrect number of arguments) : -

> ERROR (incorrect number of arguments) : +

> -13

> a defined

> 3

> 1

> 5.000

> 7

> 7.500

> ERROR (division by zero) : /

> 7.500

> 1

> 19.125

> ERROR (+ with incorrect argument type) : nil

> nil

> ERROR (incorrect number of arguments) : not

> ERROR (incorrect number of arguments) : not

> nil

> nil

> #t

> #t

> #t

> #t

> #t

> ERROR (> with incorrect argument type) : nil

> #t

> #t

> nil

> nil

> #t

> #t

> nil

> nil

> ERROR (> with incorrect argument type) : a

> nil

> ERROR (>= with incorrect argument type) : a

> ""Hello, there!""

> "Hello, there! Wait!"

> ERROR (no closing quote) : END-OF-LINE encountered at Line 1 Column 26

> ERROR (incorrect number of arguments) : string-append

> ERROR (incorrect number of arguments) : string-append

> #t

> nil

> #t

> ERROR (incorrect number of arguments) : string>?

> ERROR (incorrect number of arguments) : string>?

> ERROR (string>? with incorrect argument type) : 15

> nil

> nil

> ERROR (string<? with incorrect argument type) : 3

> ERROR (division by zero) : /

> nil

> nil

> nil

> #t

> ERROR (string-append with incorrect argument type) : 3

> ERROR (division by zero) : /

> 20

> ERROR (+ with incorrect argument type) : "hi"

> ERROR (string>? with incorrect argument type) : 5

> ERROR (unbound symbol) : about

> ERROR (incorrect number of arguments) : eqv?

> ERROR (incorrect number of arguments) : eqv?

> #t

> ERROR (incorrect number of arguments) : eqv?

> a defined

> ( ( 3
    ( 4
      5
    )
  )
)

> #t

> nil

> #t

> b defined

> #t

> c defined

> nil

> nil

> nil

> nil

> #t

> #t

> nil

> #t

> c defined

> #t

> c defined

> nil

> #t

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 1 is >>.<<

> 30

> ERROR (unexpected token) : atom or '(' expected when token at Line 1 Column 4 is >>.<<

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 10 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (level of CLEAN-ENVIRONMENT)

> ERROR (incorrect number of arguments) : if

> ERROR (incorrect number of arguments) : if

> 5

> ERROR (incorrect number of arguments) : if

> good

> good

> ERROR (no return value) : ( if
  ( >
    3
    20
  )
  ( quote
    good
  )
)

> a defined

> good

> bad

> a defined

> ( 3
  4
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> ( ( 1
    ( 2
    )
    1
  )
  1
)

> 2

> 3

> 4

> 3

> ERROR (COND format) : ( cond
)

> ERROR (COND format) : ( cond
  nil
)

> ERROR (COND format) : ( cond
  b
)

> ERROR (COND format) : ( cond
  ( #t
  )
)

> ERROR (COND format) : ( cond
  ( #t
    3
  )
  nonsense
)

> ERROR (COND format) : ( cond
  ( nil
  )
  hello
)

> ERROR (COND format) : ( cond
  hello
  ( nil
  )
  there
)

> ERROR (COND format) : ( cond
  ( nil
  )
  ( #t
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
    terrible
  )
  ( #t
    3
  )
  ( nil
  )
)

> b defined

> good

> ERROR (unbound symbol) : else

> else defined

> good

> good

> "What happened?"

> "What happened?"

> 3

> good

> ERROR (no return value) : ( cond
  ( ( >
      3
      4
    )
    ( quote
      bad
    )
  )
  ( ( >
      4
      5
    )
    ( quote
      bad
    )
  )
)

> 3

> ERROR (COND format) : ( cond
  ( nil
    3
  )
  nonsense
)

> ERROR (no return value) : ( cond
  ( nil
    3
  )
)

> ERROR (COND format) : ( cond
  ( nil
    nonsense
  )
  ( #t
    nonsense
  )
  nonsense
)

> good

> bad

> bad

> ERROR (unbound symbol) : y

> a defined

> b defined

> 5

> else defined

> ( 1
  2
)

> nil

> ( 1
  2
)

> else defined

> nil

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 11 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> ERROR (incorrect number of arguments) : begin

> 3

> 5

> ERROR (unbound symbol) : d

> ERROR (unbound symbol) : d

> ERROR (level of EXIT)

> ( 2
  3
)

> ( ( 1
    2
    3
  )
)

> ERROR (unbound symbol) : d

> a defined

> nil

> 5

> 5

> How

> ( or
  not
  to
  be
  ?
)

> ERROR (cdr with incorrect argument type) : That

> ERROR (car with incorrect argument type) : "Hi,"

> ( " Everybody!"
  "Wake up!"
)

> ERROR (cdr with incorrect argument type) : That

> nil

> ERROR (cdr with incorrect argument type) : That

> hello defined

> there defined

> ( ""CYCU ICE""
  .
  "Number One!"
)

> a defined

> ( 5
  30
  40
)

> ( 30
  40
)

> a defined

> ( ( 5
    3
    30
    40
  )
  3
  30
  40
)

> ( 3
  30
  40
)

> 3

> ( ( 3
    30
    40
  )
  3
)

> a defined

> 3

> ( 40
  3
)

> a defined

> ( 3
  ( 40
    3
  )
  3
)

> b defined

> b defined

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  3
  ( 40
    3
  )
  3
)

> ( ( ( 3
      ( 40
        3
      )
      3
    )
    ( 3
      ( 40
        3
      )
      3
    )
  )
  .
  3
)

> a defined

> b defined

> c defined

> list1 defined

> list2 defined

> str1 defined

> str2 defined

> var1 defined

> #t

> nil

> nil

> ERROR (division by zero) : /

> ( ( 80
    sun
    shines
    bright
  )
  #t
  #t
  7
  ( 1
    2
    3
  )
)

> 340

> 170

> d defined

> 20

> 400

> a defined

> b defined

> ( 0
  #t
)

> 5

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 3

> best

> a defined

> 3200

> ERROR (unbound symbol) : Look!

> ( OK?
  .
  Correct?
)

> ERROR (incorrect number of arguments) : exit

> ERROR (level of EXIT)

> ERROR (level of DEFINE)

> ERROR (incorrect number of arguments) : cons

> ERROR (+ with incorrect argument type) : "Hi"

> ERROR (level of EXIT)

> ERROR (incorrect number of arguments) : cons

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 12 viewable case ================="

> environment cleaned

> #<procedure cons>

> #<procedure car>

> myCons defined

> myCar defined

> #<procedure cons>

> ( #<procedure cons>
  .
  #<procedure car>
)

> ( 3
  4
  myCar
)

> ( ( 10
  )
  .
  20
)

> ( 20
  myCons
)

> ( ( 1
    #<procedure ->
    3
    #<procedure +>
  )
  ( 25
    .
    #<procedure car>
  )
)

> ERROR (incorrect number of arguments) : cons

> >? defined

> <? defined

> =? defined

> first defined

> second defined

> third defined

> cc defined

> "Bad"

> "OK."

> ERROR (unbound symbol) : CDR

> ( ( 1
    2
    3
  )
  ( 25
    .
    35
  )
)

> ERROR (incorrect number of arguments) : begin

> ( it
)

> ( Whether
  or
  not
  to
  be
  ?
)

> ( is
  the
  question
  !
)

> ERROR (cdr with incorrect argument type) : "Hi,"

> ( "Wake up!"
)

> sun-shine defined

> money defined

> ( 40
  shines
  bright
)

> a defined

> d defined

> b defined

> ERROR (unbound symbol) : #<procedure />

> 20

> 90

> 20

> ERROR (attempt to apply non-function) : 3

> ERROR (attempt to apply non-function) : 3

> "Best"

> a defined

> 3240

> ERROR (unbound symbol) : Look!

> ( ( OK?
    Correct?
  )
  ( OK?
    Correct?
  )
)

> opr-list defined

> ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> ERROR (attempt to apply non-function) : ( #<procedure cons>
  #<procedure pair?>
  #<procedure atom?>
)

> nil

> #t

> ERROR (unbound symbol) : ab

> a defined

> "=============== Problem 13 viewable case ================="

> environment cleaned

> ERROR (unbound symbol) : a

> operators defined

> -212

> listOfNum defined

> listOfStr defined

> listOfSym defined

> ( What?
  "When?"
  30.100
)

> ( 30.100
  "When?"
  What?
)

> abc defined

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ( What?
  ( 30.100
    "When?"
    What?
  )
)

> ERROR (car with incorrect argument type) : What?

> efg defined

> ( ( What?
    "When?"
    30.100
  )
  30.100
  "When?"
  What?
)

> ( ( What?
    "When?"
    30.100
  )
  ( 30.100
    "When?"
    What?
  )
)

> ++ defined

> -- defined

> 60.544

> 45.544

> ERROR (+ with incorrect argument type) : "Where?"

> ERROR (- with incorrect argument type) : What?

> ERROR (incorrect number of arguments) : if

> ERROR (no return value) : ( if
  ( string>?
    ( car
      listOfStr
    )
    ( car
      ( cdr
        listOfStr
      )
    )
  )
  ( car
    listOfStr
  )
)

> ERROR (car with incorrect argument type) : 30.100

> ERROR (unbound symbol) : Look!

> ERROR (unbound symbol) : Look!

> ERROR (incorrect number of arguments) : cdr

> What? defined

> When? defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( What?
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  When?
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> listOfSym defined

> ( ( What?
    10.125
  )
  ( When?
    20.319
  )
  Where?
  Who?
  How?
  Why?
  HowCome?
)

> ERROR (no more input) : END-OF-FILE encountered
Thanks for using OurScheme!<<
